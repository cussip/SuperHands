package network.chatting;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Vector;

//------------------------------------------------------------------
//클라이언트로부터 전송된 문자열을 받아서 다른 클라이언트에게 문자열을 보내주는 스레드
//------------------------------------------------------------------
class EchoThread extends Thread {
	Socket 			socket;
	Vector<Socket> 	vec;
	
	EchoThread() {
		
	}//EchoThread() 
	
	/* 클라이언트에게 메세지를 받으면, 연결된 다른 클라이언트에게 전달 */
	public void run() {		
		
	}//public void run() 
	
	/* 전송받은 메세지를 다른 클라이언트에게 보내주는 메소드 */
	
	
}//class EchoThread extends Thread 


//------------------------------------------------------------------
//public class MultiChatClient 
//------------------------------------------------------------------
public class MultiChatClient {
	//------------------------------------------------------------------
	//public static void main(String[] args)
	//------------------------------------------------------------------
	public static void main(String[] args) {
		ServerSocket 	server = null;
		Socket 			socket = null;
		
		/* 클라이언트와 연결된 소켓들을 배열처럼 저장할 벡터 객체를 생성(손님명단) */
		Vector<Socket> vec = new Vector<Socket>();
		
		try {
			server = new ServerSocket(7777);
		} catch (IOException ie) {
			System.out.println(ie.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}//public static void main(String[] args) 
}//public class MultiChatClient 
