package network.chatting;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.Vector;

//------------------------------------------------------------------
//클라이언트로부터 전송된 문자열을 받아서 다른 클라이언트에게 문자열을 보내주는 스레드
//------------------------------------------------------------------
class EchoThread extends Thread {
	Socket 			socket;
	Vector<Socket> 	vec;
	
	public EchoThread(Socket socket, Vector<Socket> vec) {
		this.socket = socket;
		this.vec 	= vec;
	}//EchoThread() 
	
	/* 클라이언트에게 메세지를 받으면, 연결된 다른 클라이언트에게 전달 */
	public void run() {	
		BufferedReader br = null;
		
		try {
			br = new BufferedReader(new InputStreamReader(socket.getInputStream()));
			String str = null;
			
			while(true) {
				/* 클라이언트로부터 문자열 받기 */
				str = br.readLine();
				
				/* 상대가 접속을 끊으면 break; */
				if(str == null) {
					vec.remove(socket);		//접속이 끊어진 상대 정보를 vector에서 삭제
					break;
				}
				/* 연결된 소켓들의 정보를 통해서 다른 클라이언트들에게 문자를 보내준다 */
				sendMessage(str);
			}
		} catch (IOException ie) {
			System.out.println(ie.getMessage());
		} finally {
			try {
				/* 열려있는 자원들을 닫는다. */
				if(br != null) { br.close(); }
				if(socket != null) { socket.close(); }
			} catch (IOException ie) {
				System.out.println(ie.getMessage());
			}
		}
	}//public void run() 
	
	/* 전송받은 메세지를 다른 클라이언트에게 보내주는 메소드 */
	
	
}//class EchoThread extends Thread 


//------------------------------------------------------------------
//public class MultiChatClient 
//------------------------------------------------------------------
public class MultiChatClient {
	//------------------------------------------------------------------
	//public static void main(String[] args)
	//------------------------------------------------------------------
	public static void main(String[] args) {
		ServerSocket 	server = null;
		Socket 			socket = null;
		
		/* 클라이언트와 연결된 소켓들을 배열처럼 저장할 벡터 객체를 생성(손님명단) */
		Vector<Socket> vec = new Vector<Socket>();
		
		try {
			server = new ServerSocket(7777);
			
			 
			/* 프로그램이 종료될 때까지 클라이언트의 연결 요청을 기다리고 */
			/* 연결 요청이 들어오면 소켓을 만들어서 클라이언트와 대화할 수 있게 만든다 */
			while(true) {
				System.out.println("접속 대기중...");
				socket = server.accept();
				
				/* 클라이언트와 연결된 소켓을 베겉에 담는다 */
				vec.add(socket);
				
				/* 소켓을 만들어서 클라이언트와 대화할 수 있도록 한다. */
				/* Thread를 구동시킨다 */
				new EchoThread(socket, vec).start();
				
			}
		} catch (IOException ie) {
			System.out.println(ie.getMessage());
		} catch (Exception e) {
			e.printStackTrace();
		}
		
	}//public static void main(String[] args) 
}//public class MultiChatClient 
